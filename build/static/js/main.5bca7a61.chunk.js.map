{"version":3,"sources":["User/User.js","Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["user","props","className","src","image","name","phone","href","email","dob","header","App","state","users","id","search","updateSearch","event","setState","target","value","substr","console","log","this","filteredUsers","filter","toLowerCase","indexOf","type","placeholder","onChange","bind","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mTA2BeA,G,YAxBF,SAACC,GACV,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,eACX,yBAAKC,IAAKF,EAAMG,SAEpB,yBAAKF,UAAU,eACX,2BAAID,EAAMI,OAEd,yBAAKH,UAAU,eACX,2BAAID,EAAMK,QAEd,yBAAKJ,UAAU,eACX,uBAAGK,KAAMN,EAAMO,OAAQP,EAAMO,QAEjC,yBAAKN,UAAU,eACX,2BAAID,EAAMQ,UCHfC,G,MAdA,WACX,OACI,yBAAKR,UAAU,aACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,iBAAf,SACA,yBAAKA,UAAU,iBAAf,QACA,yBAAKA,UAAU,iBAAf,SACA,yBAAKA,UAAU,iBAAf,SACA,yBAAKA,UAAU,iBAAf,WCqEDS,E,4MAxEbC,MAAQ,CACNC,MAAO,CACL,CACEC,GAAI,EACJV,MAAO,GACPC,KAAM,cACNC,MAAO,iBACPE,MAAO,sCACPC,IAAK,cAEP,CACEK,GAAI,EACJV,MAAO,GACPC,KAAM,eACNC,MAAO,iBACPE,MAAO,yCACPC,IAAK,cAEP,CACEK,GAAI,EACJV,MAAO,GACPC,KAAM,gBACNC,MAAO,iBACPE,MAAO,mCACPC,IAAK,eAGTM,OAAS,I,EAGXC,aAAe,SAACC,GACd,EAAKC,SAAS,CAAEH,OAAQE,EAAME,OAAOC,MAAMC,OAAO,EAAG,O,uDAG7C,IAAD,OACPC,QAAQC,IAAI,OAAQC,MACpB,IAAIC,EAAgBD,KAAKZ,MAAMC,MAAMa,QACnC,SAACb,GACC,OAAgF,IAAxEA,EAAMR,KAAKsB,cAAeC,QAAQ,EAAKhB,MAAMG,OAAOY,kBAIhE,OACE,yBAAKzB,UAAU,OACb,yBAAKA,UAAU,OACb,uBAAGA,UAAU,YAAb,sBACA,uBAAGA,UAAU,mBAAb,yFAGF,2BACE2B,KAAK,OACLC,YAAY,cACZV,MAAOI,KAAKZ,MAAMG,OAClBgB,SAAUP,KAAKR,aAAagB,KAAKR,QAEnC,kBAAC,EAAD,MACCC,EAAcQ,KAAI,SAAAjC,GACjB,OACE,kBAAC,EAAD,CACEI,MAAOJ,EAAKI,MACZC,KAAML,EAAKK,KACXC,MAAON,EAAKM,MACZE,MAAOR,EAAKQ,MACZC,IAAKT,EAAKS,IACVyB,IAAKlC,EAAKc,a,GAjENqB,aCPEC,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCGRC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8GzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.5bca7a61.chunk.js","sourcesContent":["import React from 'react';\r\nimport './User.css';\r\n\r\nconst user = (props) => {\r\n    return (\r\n        <div className='container'>\r\n            <div className='row User'>\r\n                <div className='col-sm Info'>\r\n                    <img src={props.image}></img>\r\n                </div>\r\n                <div className='col-sm Info'>\r\n                    <p>{props.name}</p>\r\n                </div>\r\n                <div className='col-sm Info'>\r\n                    <p>{props.phone}</p>\r\n                </div>\r\n                <div className='col-sm Info'>\r\n                    <a href={props.email}>{props.email}</a>\r\n                </div>\r\n                <div className='col-sm Info'>\r\n                    <p>{props.dob}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default user;","import React from 'react';\r\nimport './Header.css';\r\n\r\nconst header = () => {\r\n    return (\r\n        <div className='container'>\r\n            <div className='row HeaderRow'>\r\n                <div className='col-sm Header'>Image</div>\r\n                <div className='col-sm Header'>Name</div>\r\n                <div className='col-sm Header'>Phone</div>\r\n                <div className='col-sm Header'>Email</div>\r\n                <div className='col-sm Header'>DOB</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default header;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport User from './User/User';\r\nimport Header from './Header/Header';\r\n\r\n\r\n\r\nclass App extends Component  {\r\n  state = {\r\n    users: [\r\n      {\r\n        id: 1,\r\n        image: \"\",\r\n        name: \"Kris Jacobs\",\r\n        phone: \"(512) 123-4567\",\r\n        email: \"krish.lee&#64;learningcontainer.com\",\r\n        dob: \"05-23-1987\"\r\n      },\r\n      {\r\n        id: 2,\r\n        image: \"\",\r\n        name: \"Lucas Morris\",\r\n        phone: \"(512) 123-8910\",\r\n        email: \"racks.jacson&#64;learningcontainer.com\",\r\n        dob: \"07-23-1990\"\r\n      },\r\n      {\r\n        id: 3,\r\n        image: \"\",\r\n        name: \"Sandy Ruedell\",\r\n        phone: \"(512) 123-1112\",\r\n        email: \"joe.jacson@learningcontainer.com\",\r\n        dob: \"07-23-2000\"\r\n      }\r\n    ],\r\n    search : \"\"\r\n  }\r\n\r\n  updateSearch = (event) => {\r\n    this.setState({ search: event.target.value.substr(0, 30) });\r\n  }\r\n\r\n  render() {\r\n    console.log('this', this)\r\n    let filteredUsers = this.state.users.filter(\r\n      (users) => {\r\n        return (users.name.toLowerCase()).indexOf(this.state.search.toLowerCase()) !== -1;\r\n      }\r\n    );\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <nav className=\"Nav\">\r\n          <p className=\"NavTitle\">Employee Directory</p>\r\n          <p className=\"NavInstructions\">Click on carrots to filter by heading, or use the search box to narrow your results.</p>\r\n        </nav>\r\n\r\n        <input\r\n          type='text'\r\n          placeholder='Search name'\r\n          value={this.state.search}\r\n          onChange={this.updateSearch.bind(this)} />\r\n\r\n        <Header />\r\n        {filteredUsers.map(user => {\r\n          return (\r\n            <User\r\n              image={user.image}\r\n              name={user.name}\r\n              phone={user.phone}\r\n              email={user.email}\r\n              dob={user.dob}\r\n              key={user.id} />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","const isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' }\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}